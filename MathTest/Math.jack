// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Math.jack

/**
 * A library of commonly used mathematical functions.
 * Note: Jack compilers implement multiplication and division using OS method calls.
 */
class Math {
    static arr twoToThe;

    
    /** Initializes the library */
    function void init()
    {
        var int i, current;

        let twoToThe = Array.new(16);
        let i = 0;
        let current = 1;
        while (i < 16) {
            let twoToThe[i] = current;
            let current = current + current;
            let i = i + 1;
        }
        return;
    }

    /** Returns the absolute value of x. */
    function int abs(int x) {
        if (x < 0) {
            return -x;
        } else {
            return x;
        }
    }

    /** Returns the product of x and y. 
     *  When a Jack compiler detects the multiplication operator '*' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x*y and multiply(x,y) return the same value.
     */
    function int multiply(int x, int y) {
        var int sum, i, shiftedX;

        let sum = 0;
        let i = 0;
        let shiftedX = x;
        while (i < 16) {
            if (~(Math.bit(y, i) = 0)) {
                let sum = sum + shiftedX;
            }
            let shiftedX = shiftedX + shiftedX;
            let i = i + 1;
        }
        return sum;
    }

    /** Returns the integer part of x/y.
     *  When a Jack compiler detects the multiplication operator '/' in the 
     *  program's code, it handles it by invoking this method. In other words,
     *  the Jack expressions x/y and divide(x,y) return the same value.
     */
    function int divide(int x, int y) {
        if (x < 0) {
            if (y < 0) {
                return Math.divideAbsolute(-x, -y);
            } else {
                return -Math.divideAbsolute(-x, y);
            }
        } else {
            if (y < 0) {
                return -Math.divideAbsolute(x, -y);
            } else {
                return Math.divideAbsolute(x, y);
            }
        }
    }

    function int divideAbsolute(int x, int y) {
        var int q;
        if ((y > x) | (y < 0)) {
            return 0;
        } else {
            let q = Math.divideAbsolute(x, 2 * y);
            if ((x - (2 * q * y)) < y) {
                return 2 * q;
            } else {
                return (2 * q) + 1;
            }
        }
    }

    /** Returns the integer part of the square root of x. */
    function int sqrt(int x) {
        var int y, j, temp;

        let y = 0;
        let j = 16 / 2;
        while (~(j = 0)) {
            let j = j - 1;
            let temp = y + twoToThe[j];
            // added second condition to handle potential overflow
            if ((~((temp * temp) > x)) & ((temp * temp) > 0)) {
                let y = temp;
            }
        }
        return y;
    }

    /** Returns the greater number. */
    function int max(int a, int b) {
        if (a < b) {
            return b;
        } else {
            return a;
        }
    }

    /** Returns the smaller number. */
    function int min(int a, int b) {
        if (a > b) {
            return b;
        } else {
            return a;
        }
    }

    /** helper to returns the i-th bit of x is */
    function int bit(int x, int i) {
        return x & twoToThe[i];
    }
}
