// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Screen.jack

/**
 * A library of functions for displaying graphics on the screen.
 * The Hack physical screen consists of 512 rows (indexed 0..511, top to bottom)
 * of 256 pixels each (indexed 0..255, left to right). The top left pixel on 
 * the screen is indexed (0,0).
 */
class Screen {
    static Array screen;
    static arr twoToThe;
    static boolean color;

    
    /** Initializes the Screen. */
    function void init() {
        let screen = 16384;
        let color = true;
        do Screen.initTwoToThe();
        return;
    }

    function void initTwoToThe()
    {
        var int i, current;

        let twoToThe = Array.new(16);
        let i = 0;
        let current = 1;
        while (i < 16) {
            let twoToThe[i] = current;
            let current = current + current;
            let i = i + 1;
        }
        return;
    }

    /** Erases the entire screen. */
    function void clearScreen() {
        var int addr;
        let addr = 0;
        while (addr < 8192) {
            let screen[addr] = 0;
            let addr = addr + 1;
        }
        return;
    }

    /** Sets the current color, to be used for all subsequent drawXXX commands.
     *  Black is represented by true, white by false. */
    function void setColor(boolean b) {
        let color = b;
        return;
    }

    /** Draws the (x,y) pixel, using the current color. */
    function void drawPixel(int x, int y) {
        var int address, value;
        let address = (32 * y) + (x / 16);
        let value = screen[address]; // we peek first as we are manipulating a bit among word
        if (color) {
            let value = value | twoToThe[x & 15];
        } else {
            let value = value & (~twoToThe[x & 15]);
        }
        let screen[address] = value;
        return;
    }


    /** Draws a line from pixel (x1,y1) to pixel (x2,y2), using the current color. */
    // TODO:      adjust this one is mathematically not graphics wise - (0, 0) at topleft
    //            also generalise to draw lines that go any way 
    //            do special optimization for horizontal and vertical lines (used alot) 
    function void drawLine(int x1, int y1, int x2, int y2) {  
        var int a, b, diff, dx, dy;
        let dx = x2 - x1;
        let dy = y2 - y1;
        if (dx = 0) {
            if (dy < 0) {
                do Screen.drawVerticalLine(x1, y2, y1);
            } else {
                do Screen.drawVerticalLine(x1, y1, y2);
            }
        } else {
            if (dy = 0) {
                if (dx < 0) {
                    do Screen.drawHorizontalLine(x2, x1, y1);
                } else {
                    do Screen.drawHorizontalLine(x1, x2, y1);
                }
            }
            else {
                if (dx < 0) {
                    if (dy < 0) {
                        do Screen.drawDiagonalFallingLine(x2, -dx, y2, -dy);
                    } else {
                        do Screen.drawDiagonalRisingLine(x2, -dx, y2, dy);
                    }
                } else {
                    if (dy < 0) {
                        do Screen.drawDiagonalRisingLine(x1, dx, y1, -dy);
                    } else {
                        do Screen.drawDiagonalFallingLine(x1, dx, y1, dy);
                    }
                }
            }
        }
        return;
    }

    /** dx >= 0 and dy < 0 */
    function void drawDiagonalRisingLine(int x1, int dx, int y1, int dy) {  
        var int a, b, diff;
        let a = b = diff = 0;
        while ((~(a > dx)) & (~(b > dy))) {
            do Screen.drawPixel(x1 + a, y1 - b);
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    /** dx >= 0 and dy >= 0 */
    function void drawDiagonalFallingLine(int x1, int dx, int y1, int dy) {  
        var int a, b, diff;
        let a = b = diff = 0;
        while ((~(a > dx)) & (~(b > dy))) {
            do Screen.drawPixel(x1 + a, y1 + b);
            if (diff < 0) {
                let a = a + 1;
                let diff = diff + dy;
            } else {
                let b = b + 1;
                let diff = diff - dx;
            }
        }
        return;
    }

    /** y1 <= y2 */
    function void drawVerticalLine(int x, int y1, int y2) {  
        var int y;
        let y = y1;
        while (~(y > y2)) {
            do Screen.drawPixel(x, y);
            let y = y + 1;
        }
        return;
    }
    /** x1 <= x2 */
    function void drawHorizontalLine(int x1, int x2, int y) {
        var int x, bit, address, value;
        let x = x1;
        let bit = x & 15;
        let address = (32 * y) + (x / 16);
        let value = screen[address];

         while (~(x > x2)) {
             if (color) {
                 let value = value | twoToThe[bit];
             } else {
                 let value = value & (~twoToThe[bit]);
             }
            let x = x + 1;
            let bit = x & 15;

            if (bit = 0) {
                let screen[address] = value;
                let address = address + 1;
                let value = screen[address];
            }
         }
         let screen[address] = value;
         return;
    }

    /** Draws a filled rectangle whose top left corner is (x1, y1)
     * and bottom right corner is (x2,y2), using the current color. */
    function void drawRectangle(int x1, int y1, int x2, int y2) {
        var int y;
        let y = y1;
        while (~(y > y2)) {
            do Screen.drawHorizontalLine(x1, x2, y);
            let y = y + 1;
        }
        return;
    }

    /** Draws a filled circle of radius r<=181 around (x,y), using the current color. */
    // can potentially lead to overflow
    // to handle, limit r to no greater than 181 - this make it hardware dependent (hack screen)
    function void drawCircle(int x, int y, int r) {
        var int dx, dy, r2;
        let r2 = r * r;
        let dy = -r;
        while (~(dy > r)) {
            let dx = Math.sqrt(r2 - (dy * dy));
            do Screen.drawHorizontalLine(x - dx, x + dx, y + dy);
            let dy = dy + 1;
        }
        return;
    }

    // I added this
    function void drawCircleOutline(int x, int y, int r) {
        var int dx, dy, r2;
        let r2 = r * r;
        let dy = -r;
        // refactor
        while (~(dy > r)) {
            do Screen.drawPixel(x - dx, y + dy);
            do Screen.drawPixel(x + dy, y + dy);
            let dy = dy + 1;
        }
        return;
    }
}
